name: Build and deploy docker image to AWS ECR

on:
  push:
    branches:
      - main
      - development

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Set STAGE environment variable
      run: echo "STAGE=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}" >> $GITHUB_ENV

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.STAGE }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Verify pushed image
      env:
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        AWS_REGION: ${{ vars.AWS_REGION }}
        IMAGE_TAG: ${{ env.STAGE }}
      run: |
        aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region $AWS_REGION

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.6.6
        terraform_wrapper: false

    - name: Init terraform
      working-directory: ./terraform
      env:
        STAGE: ${{ env.STAGE }}
      run: |
        terraform init -backend=true -backend-config="bucket=${{ secrets.BUCKET_FOR_REMOTE_STATE }}" -backend-config="key=${{ secrets.KEY_FOR_REMOTE_STATE }}" -backend-config="region=${{ secrets.REGION_FOR_REMOTE_STATE }}" -backend-config="dynamodb_table=${{ secrets.DYNAMO_TABLE_FOR_REMOTE_STATE }}"

    - name: Validate terraform
      id: terraform-validate
      working-directory: ./terraform
      run: terraform validate -no-color

    - name: Plan terraform
      id: terraform-plan
      working-directory: ./terraform
      run: terraform plan -no-color

    - uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.TF_WORKING_DIR }}\`, Workflow: \`${{ github.workflow }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      shell: bash
      if: steps.terraform-plan.outcome == 'failure'
      run: exit 1

    - name: Apply terraform
      id: terraform-apply
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ env.STAGE }}
      shell: bash
      working-directory: ./terraform
      run: terraform apply -auto-approve -no-color -var "app_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
